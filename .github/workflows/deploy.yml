name: Build and Deploy Docker App to Azure

on:
  push:
    branches:
      - main  # Тригер на пуш в основну гілку (можна змінити на іншу)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Чекаут коду з репозиторію
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Налаштування Node.js для зборки (якщо необхідно)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3. Встановлення залежностей і збірка
      - name: Install dependencies and build
        run: |
          npm install
          npm run build

      # 4. Логін в Azure за допомогою Azure Service Principal
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 5. Сборка Docker-образа
      - name: Build Docker image
        run: docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.ACR_REPO }}:${{ env.ACR_TAG }} .

        env:
          ACR_REPO: "your-repo-name"   # Назва репозиторію в ACR
          ACR_TAG: "latest"            # Тег для Docker образу (можна використовувати SHA або інші значення)

      # 6. Логін в Azure Container Registry та пуш Docker-образа
      - name: Docker Push
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.ACR_REPO }}:${{ env.ACR_TAG }}

      # 7. Налаштування Web App для використання Docker-образа
      - name: Configure Azure Web App for Docker
        run: |
          az webapp config container set \
            --name ${{ secrets.WEBAPP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --docker-custom-image-name "${{ secrets.ACR_LOGIN_SERVER }}/${{ env.ACR_REPO }}:${{ env.ACR_TAG }}" \
            --docker-registry-server-url "https://${{ secrets.ACR_LOGIN_SERVER }}" \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

      # 8. Рестарт Web App для застосування нового Docker-образа
      - name: Restart Azure Web App
        run: |
          az webapp restart \
            --name ${{ secrets.WEBAPP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }}
